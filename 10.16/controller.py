"""Контроллер MVC."""

# КОММЕНТАРИЙ: при импорте модулей своего проекта желательно использовать инструкцию import, а не from...import... — это уменьшает вероятность закольцовывания импорта
# УДАЛИТЬ: экземпляр контроллера должен получать необходимые объекты в конструкторе, следовательно вам не нужны эти импорты здесь — для этого создавался модуль входа
from model import Email
from view import CLIView

from enum import Enum


# ИСПОЛЬЗОВАТЬ: следует двигаться в сторону ухода от явного использования литералов в коде — особенно в ситуациях с повторяющимися одинаковыми литералами — перечислитель является хорошей заменой, в небольших скриптах такого подхода вам хватит надолго
class UserAnswer(tuple, Enum):
    YES = ('y', 'д')
    NO = ('n', 'н')


class Application:
    """Контроллер"""

    # ИСПОЛЬЗОВАТЬ: если объекты классов вас интересуют только для аннотаций, то можно описать необходимый класс строковым литералом, без импорта (появляющиеся предупреждения в IDE либо игнорируются, либо настраиваются)
    def __init__(self, view: 'CLIView'):
        self.em = None
        self.view = view
        # ДОБАВИТЬ: модель тоже чаще всего записывается в атрибут контроллера; в случае, когда нам требуются разные экземпляры модели, можно записать объект класса модели, и создавать новые экземпляры по мере необходимости — таким образом, контроллер выступит в качестве фабрики для экземпляров модели

    def start(self) -> None:
        """Приветствует и начинает проверку"""
        self.view.start_view()
        self.check_email()

    def one_else(self):
        """Зацикливает ввод почты"""
        param = input("ещё?\n").lower()
        if param in UserAnswer.YES:
            return self.check_email()
        else:
            self.end()

    def check_email(self) -> None:
        """Проверяет почту"""
        try:
            # КОММЕНТАРИЙ: но здесь на самом деле не требуется создавать новый экземпляр каждый раз
            self.em = Email(self.view.input_email())
            print("почта в порядке")
            # ИСПРАВИТЬ: вы же хорошо начали фрагментировать работу с адресом на методы — стоило бы довести до конца и убрать этот код в метод save_email()
            save_or_not = input("Сохранить?\n").lower()
            if save_or_not in UserAnswer.YES:
                self.save_email()
                self.one_else()
            else:
                self.end()
        except ValueError:
            print("Неверная почта")
            self.one_else()

    def save_email(self) -> None:
        """Сохраняет почту"""
        self.em.save()

    def end(self) -> None:
        """Завершает работу"""
        self.view.end_view()


# УДАЛИТЬ: создание и инициация основных объектов должны выполняться в коде входа в приложение; здесь пишутся только тесты под проверкой импорта
app = Application(CLIView())
app.start()
