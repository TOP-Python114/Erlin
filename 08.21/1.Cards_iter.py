from typing import Generator
from random import choice

"""
1
Напишите итератор колоды карт (52 карты). При вызове функции next() будет представлена следующая карта.
Каждая карта представлена в виде кортежа типа (2, 'пики').
    Номиналы: 1 — туз, 11 — валет, 12 — дама, 13 — король
    Порядок следования мастей: черви, бубны, пики, крести.
"""

# КОММЕНТАРИЙ: deck – колода
#Ok
deck1 = ((i, j) for j in ("черви", "бубны", "пики", "крести") for i in range(1, 14))
# maybe so:
# cards = ((i, j) for j in ("черви", "бубны", "пики", "крести") for i in list(range(2,14)) + [1])
for i in range(52):
    print(deck1.__next__(), end=" -> ")
print()

# ОТВЕТИТЬ: зачем этот блок, если вы знаете количество карт в колоде?
# Просто чтобы показать что это итератор, чтобы пепрехвать исключение после прохождения по нему

try:
    print(deck1.__next__())
except StopIteration:
    print('iterator is listed\n')


"""
Реализуйте функцию-генератор для получения перемешанной колоды.
    Подсказка: используйте функцию choice() из модуля random
"""

deck2 = ((i, j) for j in ("черви", "бубны", "пики", "крести") for i in range(1, 14))

def deck_shuffle(cards: Generator) -> Generator:
    lk = list(cards)
    while lk:
        rand_card = choice(lk)
        lk.remove(rand_card)
        yield rand_card


random_set = deck_shuffle(deck2)

for i in random_set:
    print(i, end=" -> ")


# stdout:
# (1, 'черви') -> (2, 'черви') -> (3, 'черви') -> (4, 'черви') -> (5, 'черви') -> (6, 'черви') -> (7, 'черви') -> (8, 'черви') -> (9, 'черви') -> (10, 'черви') -> (11, 'черви') -> (12, 'черви') -> (13, 'черви') -> (1, 'бубны') -> (2, 'бубны') -> (3, 'бубны') -> (4, 'бубны') -> (5, 'бубны') -> (6, 'бубны') -> (7, 'бубны') -> (8, 'бубны') -> (9, 'бубны') -> (10, 'бубны') -> (11, 'бубны') -> (12, 'бубны') -> (13, 'бубны') -> (1, 'пики') -> (2, 'пики') -> (3, 'пики') -> (4, 'пики') -> (5, 'пики') -> (6, 'пики') -> (7, 'пики') -> (8, 'пики') -> (9, 'пики') -> (10, 'пики') -> (11, 'пики') -> (12, 'пики') -> (13, 'пики') -> (1, 'крести') -> (2, 'крести') -> (3, 'крести') -> (4, 'крести') -> (5, 'крести') -> (6, 'крести') -> (7, 'крести') -> (8, 'крести') -> (9, 'крести') -> (10, 'крести') -> (11, 'крести') -> (12, 'крести') -> (13, 'крести') ->
# iterator is listed

# (5, 'крести') -> (3, 'пики') -> (6, 'черви') -> (9, 'крести') -> (10, 'черви') -> (11, 'бубны') -> (4, 'пики') -> (5, 'пики') -> (4, 'бубны') -> (12, 'черви') -> (6, 'пики') -> (7, 'черви') -> (6, 'бубны') -> (8, 'черви') -> (9, 'бубны') -> (11, 'черви') -> (12, 'пики') -> (9, 'пики') -> (10, 'бубны') -> (5, 'бубны') -> (3, 'крести') -> (8, 'крести') -> (10, 'пики') -> (5, 'черви') -> (7, 'пики') -> (8, 'пики') -> (8, 'бубны') -> (13, 'черви') -> (6, 'крести') -> (12, 'крести') -> (11, 'пики') -> (3, 'черви') -> (1, 'бубны') -> (10, 'крести') -> (2, 'бубны') -> (1, 'черви') -> (7, 'бубны') -> (13, 'крести') -> (13, 'пики') -> (7, 'крести') -> (2, 'черви') -> (3, 'бубны') -> (13, 'бубны') -> (1, 'пики') -> (1, 'крести') -> (2, 'крести') -> (12, 'бубны') -> (11, 'крести') -> (9, 'черви') -> (2, 'пики') -> (4, 'черви') -> (4, 'крести') ->


# ИТОГ: верно — 5/5
